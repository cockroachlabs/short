// Copyright 2020 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"mime"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/pkg/errors"
	"github.com/spf13/cobra"
)

func main() {
	s := &slurp{}
	root := &cobra.Command{
		Use: "turn static files into golang code",
		RunE: func(cmd *cobra.Command, args []string) error {
			return s.run()
		},
	}
	root.Flags().StringVarP(&s.directory, "dir", "d", ".", "the directory to scan")
	root.Flags().StringSliceVarP(&s.extensions, "include", "i", nil, "file include extensions (.js, .css, ...)")
	root.Flags().StringVarP(&s.out, "out", "o", "", "the file to write (defaults to dir/slurp.go)")
	root.Flags().StringVarP(&s.out, "pkg", "p", "", "the package declaration (defaults to dirname)")

	if err := root.Execute(); err != nil {
		log.Printf("%v", err)
		os.Exit(1)
	}
	os.Exit(0)
}

type slurp struct {
	directory  string
	extensions []string
	out        string
	pkg        string
}

func (s *slurp) run() error {
	var include []string
	var err error

	s.directory, err = filepath.Abs(s.directory)
	if err != nil {
		return err
	}
	log.Print(s.directory)

	if err := filepath.Walk(s.directory, func(path string, info os.FileInfo, err error) error {
		for _, ext := range s.extensions {
			if !info.IsDir() && strings.HasSuffix(info.Name(), ext) {
				include = append(include, path)
				break
			}
		}
		return nil
	}); err != nil {
		return err
	}

	if s.pkg == "" {
		s.pkg = filepath.Base(s.directory)
	}
	if s.out == "" {
		s.out = "slurp.go"
	}

	out, err := os.OpenFile(s.out, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
	if err != nil {
		return err
	}
	log.Print(s.pkg, " ", s.out)
	fmt.Fprint(out, "// Generated by slurp. Do not edit.\n\n")
	fmt.Fprintf(out, "package %s\n", s.pkg)
	fmt.Fprintf(out, `import "time"`)
	fmt.Fprintf(out, "\n\n// Assets to be served.\n")
	fmt.Fprintf(out, "var Assets = map[string]struct{ContentType string; MTime time.Time; Data[] byte;} {\n")
	for _, inc := range include {
		stat, err := os.Stat(inc)
		if err != nil {
			return errors.Wrapf(err, "stat %s", inc)
		}
		data, err := ioutil.ReadFile(inc)
		if err != nil {
			return errors.Wrapf(err, "reading file %s", inc)
		}
		typ := mime.TypeByExtension(filepath.Ext(inc))
		if typ == "" {
			typ = http.DetectContentType(data)
		}
		rel, _ := filepath.Rel(s.directory, inc)
		fmt.Fprintf(out, "%q: {%q, time.Unix(0, %d), []byte{",
			rel, typ, stat.ModTime().UnixNano())
		for _, byte := range data {
			fmt.Fprintf(out, "0x%x, ", byte)
		}
		fmt.Fprint(out, "}},\n")
	}
	fmt.Fprintf(out, "}\n")
	out.Close()
	return nil
}
